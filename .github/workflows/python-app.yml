# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4
    - name: Install poetry
      run: pipx install poetry
    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'poetry'
    - run: poetry install
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: poetry run pytest
    - name: Test CLI
      run: |
        # Basic test
        poetry run csv-metadata-quality -i data/test.csv -o /tmp/test.csv
        # Test with unsafe fixes
        poetry run csv-metadata-quality -i data/test.csv -o /tmp/test.csv -u
        # Test with experimental checks
        poetry run csv-metadata-quality -i data/test.csv -o /tmp/test.csv -e
        # Test with AGROVOC validation
        poetry run csv-metadata-quality -i data/test.csv -o /tmp/test.csv --agrovoc-fields dcterms.subject
        # Test with AGROVOC validation (and dropping invalid)
        poetry run csv-metadata-quality -i data/test.csv -o /tmp/test.csv --agrovoc-fields dcterms.subject -d
